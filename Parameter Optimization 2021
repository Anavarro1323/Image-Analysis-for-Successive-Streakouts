tic
currentlap = 1
pvaluelist = {}
Coordinates = cell(1,160)


warning('off','all')
%Image Loading and Preprocessing
% InputRep = imread('InputRep.jpg');

 Target = table2array(Targets) ; 
 OriginalImage = InputRep;	%Loads image into workspace
 
  BW =  OriginalImage(:,:,2); % the 2 in the the third index for this line can be toggled between 1 and 3 for clearest distinction between colony and background
      ThresholdedImage = imbinarize(BW, 'adaptive','ForegroundPolarity','dark','Sensitivity',0.4);
        parr =NaN([4 4 10]);
     
imshowpair(ThresholdedImage,BW,'montage') % View results of toggle here 

 %False Positive Elimination Set up 
% CC1 = bwconncomp(BWcomp); %makes a struct array of object information, saved as CC1
% InLabMat = labelmatrix(CC1); %turns the CC1 structural array into a label matrix, different objects are identified in sequential numbers
% RGBLabMat = label2rgb(InLabMat,'jet','w','shuffle'); %turns the sequential numbering into different colors, for visualization
% array1 = cell(CC1.NumObjects,1); %creates a list of spaces that will be populated by either 0 or 1, based on maxpix size
% 



for rangemin = [6:1:9];
    
for rangemax = [10:1:12];
  range = [rangemin rangemax];
  
 for Sensitivityloop = [0.9:0.01:1];
sense = Sensitivityloop;
     
%for maxpixloop = [5:5:205] 
%maxpix = maxpixloop; %maxpix at first was 125

%%False Positive elimination algorithm
% 
% for x =[1:CC1.NumObjects];                           %fills in array1 with 1 or 0, depending on whether a detected object is larger than the maxpix threshold limit. 
% if length(CC1.PixelIdxList{1,x}) > maxpix;
% array1{x,1} = 1;
% else array1{x,1} = 0;
% end
% end
% 
% for x = [1:CC1.NumObjects];                           %If array1 is 1, delete the object, otherwise leave the object
%     if array1{x,1} == 1;
% InLabMat(InLabMat == x) = 0;
%     end
% end
% FPEresult = label2rgb(InLabMat,'jet','w','shuffle');  
% 
% 




%Circle Finding Algorithm
[SampleC,SampleR] = imfindcircles(ThresholdedImage,range,'ObjectPolarity','dark', ...;
'Sensitivity',sense,'Method','twostage');

% figure;imshow(InputRep)
% viscircles(SampleC, SampleR, 'EdgeColor', 'b')



%InLabMat = labelmatrix(CC1);


%Comparing result to the ideal in this loop, Aim to maximize p value 


Target(isnan(Target))=0;
ThisRunAreas = times(pi,power(SampleR,2));
A = padcat(ThisRunAreas,Target);
[h,pvalue] = ttest2(A(:,1),A(:,2));

Pvaluelist(currentlap).pvalue = pvalue


Coordinates(currentlap) = {[rangemin; rangemax; sense]}
%LengthEffect = 1/minus(length(Target),length(SampleR));
%pres = times(LengthEffect,pvalue);  %pres gives a "P value" that depends on BOTH the number of colonies detected AND the closeness of the distribution to the ideal
%Or, at least, it's supposed to. I need a statistical test that can account
%for both, because the highest pres value in the 20k calculations does not
%result in a good parameter recomendation. 


%adds resulting p value into the P value array (parr), put into the cell,
%cell P value is put in the parr array depends on the parameters
%parr(rangemin,rangemax,fix(times(maxpixloop,0.2)),fix(times(sense,10))) = pres;



%How Many Laps so far?
currentlap = currentlap + 1 



end


 end
end


Pvaluecell = struct2cell(Pvaluelist)
Pvaluemat = cell2mat(Pvaluecell)



IdealPvalue = max((Pvaluemat(:,:,:)))
for k = [1:length(Pvaluelist)]
    if Pvaluelist(k).pvalue == IdealPvalue  
    Index = k
    end
end


RminI= Coordinates{Index}(1)
RmaxI= Coordinates{Index}(2)
SenseI = Coordinates{Index}(3)

Irange = [RminI RmaxI]

% [IRmin,IRmax,I3,I4] = ind2sub(size(parr),Ideal); %Ideal Parameters are saved to a variable
% Imaxpix = times(I3,5)
% Irange = [IRmin IRmax]
% Isense = times(I4,0.1)



%FPE with ideal
% 
% for x =[1:CC1.NumObjects];
% if length(CC1.PixelIdxList{1,x}) > I3;
% array1{x,1} = 1;
% else array1{x,1} = 0;
% end
% end
% 
% for x = [1:CC1.NumObjects];
%     if array1{x,1} == 1;
% InLabMat(InLabMat == x) = 0;
%     end
% end
% FPEresultIdeal = label2rgb(InLabMat,'jet','w','shuffle');


%Circle Finding Algorithm with Ideal
[IdealC,IdealR] = imfindcircles(ThresholdedImage,[Irange],'ObjectPolarity','dark', ...;
'Sensitivity',SenseI,'Method','twostage');



figure;imshow(ThresholdedImage)
viscircles(IdealC, IdealR, 'EdgeColor', 'b')

figure;imshow(InputRep)
viscircles(IdealC, IdealR, 'EdgeColor', 'b')

clc 
%Declaration of Ideal Parameters
fprintf('ideal Range Minimum is')
RminI
fprintf('ideal Range Maximum is')
RmaxI
%fprintf('ideal max pixel value is')
%Imaxpix
fprintf('ideal max sensitivity is')
SenseI
% fprintf('ideal threshold value is')
% I5 

toc
