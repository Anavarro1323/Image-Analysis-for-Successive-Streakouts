tic
currentlap = 0
Finds = 0
pvaluelist = {}



warning('off','all')
%Image Loading and Preprocessing
InputRep = imread('MutG3.jpg');
 Target = table2array(Targets) ; 
 OriginalImage = InputRep;	%Loads image into workspace
 
  BW =  OriginalImage(:,:,2); % the 2 in the the third index for this line can be toggled between 1 and 3 for clearest distinction between colony and background
      ThresholdedImage = imbinarize(BW, 'adaptive','ForegroundPolarity','bright','Sensitivity',0.4);
    
     


 %False Positive Elimination Set up 
 CC1 = bwconncomp(ThresholdedImage); %makes a struct array of object information, saved as CC1
InLabMat = labelmatrix(CC1); %turns the CC1 structural array into a label matrix, each row is an object, each column is the label matrix is a 1D-index-of-a-pixel within the object indicated by row
RGBLabMat = label2rgb(InLabMat,'jet','w','shuffle'); %turns the sequential numbering into different colors, for visualization
array1 = cell(CC1.NumObjects,1); %creates a list of spaces that will be populated by either 0 or 1, based on maxpix size. Each row is an object, entry in column 1 will indicate given object is to be deleted




for rangemin = [1:5];
    
for rangemax = [6:11];
  range = [rangemin rangemax];
  
 for Sensitivityloop = [0.95:0.01:.99];
sense = Sensitivityloop;
     
for maxpix = [80:10:150]  
%How Many Laps so far?
currentlap = currentlap + 1 
    
CC1 = bwconncomp(ThresholdedImage); %makes a struct array of object information, saved as CC1
InLabMat = labelmatrix(CC1);

%%False Positive elimination algorithm
%                                                      X represents object
for x =[1:CC1.NumObjects];                           %fills in array1 with 1 or 0, depending on whether a detected object is larger than the maxpix threshold limit. 
 if length(CC1.PixelIdxList{1,x}) > maxpix;             % compare number of pixels in object to maxpix value
 array1{x,1} = 1;                                       %Array1 is a 2D array [size is #objects = row number, 1 is column number]                                                     
 else array1{x,1} = 0;                                   %If current object has more pixels than maxpix, array1's entry for this object is 1
 end                                                        %Array1 stores whether a given object should be erased. 1 if yes, 2 if 0
 end
 
 for x = [1:CC1.NumObjects];                           %If array1 is 1, delete the object, otherwise leave the object
     if array1{x,1} == 1;
 InLabMat(InLabMat == x) = 0;                         %Delete the object. Within the Label matrix, a row (object) chosen to be deleted will have all of the pixel coordinates turned to 0. 
     end
 end
 FPEresult = label2rgb(InLabMat,'jet','w','shuffle');  

 
%Circle Finding Algorithm
[SampleC,SampleR] = imfindcircles(FPEresult,range,'ObjectPolarity','dark','Sensitivity',sense,'Method','twostage');

% figure;imshow(FPEresult)
% viscircles(SampleC, SampleR, 'EdgeColor', 'b')
% 
% pause (0.5)
%     close all


Target(isnan(Target))=0;
ThisRunAreas = times(pi,power(SampleR,2));
A = padcat(ThisRunAreas,Target);
[h,pvalue] = ttest2(A(:,1),A(:,2));

Pvaluelist(currentlap).pvalue = pvalue;
colcount = length(SampleR);

    Index(currentlap).lap = currentlap
    Index(currentlap).Pval = pvalue;
    Index(currentlap).colcount = colcount;
    Index(currentlap).Rmin = rangemin;
    Index(currentlap).Rmax = rangemax;
    Index(currentlap).Maxpix = maxpix;
    Index(currentlap).Sense = sense;


end 


end

 end
end

%close all

Finds = 0
for k = [1:length(Index)]
if Index(k).Pval < 0.005;
    Finds = Finds + 1;
    Batch(Finds).lap = Index(k).lap;
    Batch(Finds).pval = Index(k).Pval;
    Batch(Finds).colcount = Index(k).colcount;
end
end

for k = [1:length(Batch)]
    if Batch(k).colcount == 76
    Ideal = Batch(k).lap
    end
end


RminI= Index(Ideal).Rmin
RmaxI= Index(Ideal).Rmax
SenseI = Index(Ideal).Sense
MaxpixI = Index(Ideal).Maxpix

%IdealFPE

%%False Positive elimination algorithm
% 
for x =[1:CC1.NumObjects];                           %fills in array1 with 1 or 0, depending on whether a detected object is larger than the maxpix threshold limit. 
 if length(CC1.PixelIdxList{1,x}) > MaxpixI;
 array1{x,1} = 1;
 else array1{x,1} = 0;
 end
 end
 
 for x = [1:CC1.NumObjects];                           %If array1 is 1, delete the object, otherwise leave the object
     if array1{x,1} == 1;
 InLabMat(InLabMat == x) = 0;
     end
 end
 FPEresultI = label2rgb(InLabMat,'jet','w','shuffle');

 %%%%%%%%%%%%%%%





Irange = [RminI RmaxI]

%Circle Finding Algorithm with Ideal
[IdealC,IdealR] = imfindcircles(FPEresultI,[Irange],'ObjectPolarity','dark', ...;
'Sensitivity',SenseI,'Method','twostage');

A = padcat(times(pi,power(IdealR,2)),Target);

figure;imshow(FPEresultI)
viscircles(IdealC, IdealR, 'EdgeColor', 'b')

figure;imshow(imcomplement(InputRep))
viscircles(IdealC, IdealR, 'EdgeColor', 'b')

clc 
%Declaration of Ideal Parameters
fprintf('ideal Range Minimum is')
RminI
fprintf('ideal Range Maximum is')
RmaxI
%fprintf('ideal max pixel value is')
%Imaxpix
fprintf('ideal max sensitivity is')
SenseI
fprintf('ideal MaxPix value is')
MaxpixI 

save('ParameterWorkspace')
toc

